{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uPAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAG5B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCqBOK,EA5BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAMpB,OACC,gCAEEA,EAAOC,KAAI,SAACC,EAAMC,GAElB,OACA,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,MANR,QCWcC,EAnBG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,qBAAKV,UAAU,MAAf,SAEA,uBACAA,UAAU,UACTW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCEI,G,YATA,SAACC,GACf,OACC,qBAAKC,MAAS,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACEJ,EAAMK,aCmBKC,E,kDArBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAW,GAHM,E,qDAOnB,SAAkBC,EAAOC,GAExBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAGG,KAAKJ,MAAMC,SACN,0DAGDG,KAAKX,MAAMK,a,GAlBQQ,aCwDbC,E,kDA/Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAbzC,EAAKX,MAAQ,CACZlB,OAAQ,GACRK,YAAa,IAJD,E,qDAQd,WAAqB,IAAD,OACnByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAACvB,OAAQkC,S,oBAQxC,WAAU,IAAD,OACFC,EAAiBb,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAAC,GAC/C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAIjE,OAAgC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OAEb,+CAIR,sBAAK5C,UAAU,KAAf,UACC,qBAAIA,UAAU,UAAd,UAAwB,qCAAxB,MAAyC,qCAAzC,YACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACC,cAAC,EAAD,CAAU1B,OAAUmC,e,GArCNX,aCEHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACR,cAAC,EAAD,IACCC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7a6adf41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\t\r\n\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\t// if(true){\r\n\t// \tthrow new Error('cardList error');\r\n\t// }\r\n\r\nreturn (\r\n\t<div>\r\n\t{\r\n \t\trobots.map((user, i) => {\r\n\r\n\t\t\treturn (\r\n\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t />\r\n\t\t\t );\r\n\t\t})\r\n \t};\r\n\r\n  </div>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\r\n\t\t<input\r\n\t\tclassName='pa2 ba '\r\n\t\t type='search' \r\n\t\t placeholder='search robots' \r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\r\n\t\t </div>\r\n\r\n\r\n\t\t);\r\n\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style = {{ overflow: 'scroll', border: '2px solid black', height: '600px'}} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info)\r\n\t{\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Ooops somethimg is wrong</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robots';\r\nimport './App.css';\r\nimport './SearchBox.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response =>response.json())\r\n\t\t.then(users => {this.setState({robots: users})});\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\r\n\t\t})\r\n\r\n\t\tif(this.state.robots.length === 0)\r\n\t\t{\r\n\t\t\treturn <h1>Loading . . .</h1>\r\n\t\t}\r\n\t\telse {\t\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f2 grow'><span>R</span>obo<span>F</span>riends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardList robots = {filteredRobots} />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\r\n\t\t\t)\r\n\t\t}\r\n}\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}